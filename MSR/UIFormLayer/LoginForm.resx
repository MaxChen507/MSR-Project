<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logo_pictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Q9p6G1E9AAAAAElFTkSuQmCC
</value>
  </data>
</root>